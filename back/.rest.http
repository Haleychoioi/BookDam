### API 테스트를 위한 기본 설정
@baseUrl = http://localhost:3000/api
@communityId = 30
@postId = 48
@commentId = 17
@teamPostId = 18
@teamCommentId = 13
@publicReplyCommentId = 18
@teamReplyCommentId = 12

@userId = 1    
@applicantUserId = 2   
@bookIsbn13 = 9791190090001

### --------------------------------------------------------------------------------
### 초기 데이터 준비 (필수)
### --------------------------------------------------------------------------------
# 1. MySQL에 'users' 테이블에 userId 1과 2를 미리 삽입해야 합니다.
#    - userId 1: 일반 사용자
#    - userId 2: 커뮤니티 팀장 역할을 수행할 사용자 (닉네임이 'postAuthor'로 사용될 수 있음)
# 2. MySQL에 'books' 테이블에 isbn13 '9791190090001'인 책을 미리 삽입해야 합니다.
#    - 이 책 정보가 없으면 커뮤니티 생성(2번 요청)이 실패합니다.
# 위 작업은 이미 완료하셨다고 하셨으므로, 아래 '0. 새 책 생성' 요청은 건너뛰거나,
# 만약을 대비해 한 번 더 실행하여 데이터 존재 여부를 확인할 수 있습니다.

### --------------------------------------------------------------------------------
### 커뮤니티 관련 테스트
### --------------------------------------------------------------------------------

### 1. 모든 커뮤니티 조회 (GET /api/communities)
GET {{baseUrl}}/communities?page=1&pageSize=10&sort=latest
Content-Type: application/json

### 2. 새로운 커뮤니티 생성 (POST /api/communities)
# @userId가 존재하는 사용자인지, @bookIsbn13에 해당하는 책이 존재하는지 확인하세요.
# 성공 시 응답에서 'communityId'를 확인하여 상단의 @communityId 변수를 업데이트하세요.
POST {{baseUrl}}/communities
Content-Type: application/json

{
  "userId": {{userId}},
  "bookIsbn13": "{{bookIsbn13}}",
  "title": "새로운 독서 커뮤니티",
  "content": "이 커뮤니티는 최신 소설을 함께 읽고 토론합니다.",
  "maxMembers": 5
}

### 3. 특정 도서 관련 커뮤니티 목록 조회 (GET /api/communities/books/:itemId)
GET {{baseUrl}}/communities/books/{{bookIsbn13}}
Content-Type: application/json

### 4. 특정 커뮤니티 상세 조회 (GET /api/communities/:communityId)
# 상단의 @communityId 변수가 올바르게 설정되었는지 확인하세요.
GET {{baseUrl}}/communities/{{communityId}}
Content-Type: application/json

### 5. 커뮤니티 상태 업데이트 (PUT /api/communities/:communityId/status)
# @communityId의 팀장(LEADER)인 @userId로 요청해야 합니다.
# (커뮤니티 생성 시 팀장이 자동으로 할당됩니다.)
PUT {{baseUrl}}/communities/{{communityId}}/status
Content-Type: application/json

{
  "newStatus": "ACTIVE",
  "requestingUserId": {{userId}}
}

### 6. 커뮤니티 삭제 (DELETE /api/communities/:communityId)
# @communityId의 팀장(LEADER)인 @applicantUserId로 요청해야 합니다.
DELETE {{baseUrl}}/communities/{{communityId}}
Content-Type: application/json

{
  "requestingUserId": {{userId}}
}

### --------------------------------------------------------------------------------
### 전체 게시판 관련 테스트
### --------------------------------------------------------------------------------

### 7. 전체 게시판에 게시물 작성 (POST /api/posts/write)
# @userId가 존재하는 사용자인지 확인하세요.
# 성공 시 응답에서 'postId'를 확인하여 상단의 @postId 변수를 업데이트하세요.
POST {{baseUrl}}/posts/write
Content-Type: application/json

{
  "userId": {{userId}},
  "title": "전체 게시판 테스트 게시물",
  "content": "이것은 전체 게시판에 작성된 테스트 게시물입니다."
}

### 8. 전체 게시판 게시물 목록 조회 (GET /api/posts)
GET {{baseUrl}}/posts?page=1&size=10&sort=latest
Content-Type: application/json

### 9. 특정 게시물 상세 정보 조회 (GET /api/posts/:id)
# 상단의 @postId 변수가 올바르게 설정되었는지 확인하세요.
GET {{baseUrl}}/posts/{{postId}}
Content-Type: application/json

### 10. 특정 게시물 수정 (PUT /api/posts/:id)
# @postId의 작성자인 @userId로 요청해야 합니다.
PUT {{baseUrl}}/posts/{{postId}}
Content-Type: application/json

{
  "title": "수정된 게시물 제목",
  "content": "수정된 게시물 내용입니다.",
  "userId": {{userId}}
}

### 11. 특정 게시물 삭제 (DELETE /api/posts/:id)
# @postId의 작성자인 @userId로 요청해야 합니다.
DELETE {{baseUrl}}/posts/{{postId}}
Content-Type: application/json

{
  "userId": {{userId}}
}

### --------------------------------------------------------------------------------
### 퍼블릭 댓글 관련 테스트
### --------------------------------------------------------------------------------

### 12. 특정 게시물에 최상위 댓글 작성 (parentId 없음)
# @postId가 존재하는지, @userId가 존재하는 사용자인지 확인하세요.
# 성공 시 응답에서 'commentId'를 확인하여 상단의 @commentId 변수를 업데이트하세요.
# 이 commentId는 이후 대댓글 작성 시 parentId로 사용될 수 있습니다.
POST {{baseUrl}}/posts/{{postId}}/comments
Content-Type: application/json

{
  "userId": {{userId}},
  "content": "이것은 최상위 테스트 댓글입니다."
}

### 12.1. 특정 게시물에 대댓글 작성 (parentId 포함)
# @postId는 대댓글을 작성할 게시물 ID로 변경하세요.
# @userId는 대댓글을 작성할 사용자 ID로 변경하세요.
# @commentId 변수가 최상위 댓글의 ID로 설정되어 있는지 확인하세요.
# 성공 시 응답에서 'commentId'를 확인하여 상단의 @publicReplyCommentId 변수를 업데이트하세요.
POST {{baseUrl}}/posts/{{postId}}/comments
Content-Type: application/json

{
  "userId": {{userId}},
  "content": "이것은 최상위 댓글에 대한 대댓글입니다.",
  "parentId": {{commentId}}
}

### 13. 특정 게시물의 댓글 목록 조회 (대댓글 포함 확인)
# 상단의 @postId 변수가 올바르게 설정되었는지 확인하세요.
# 응답에서 최상위 댓글의 `replies` 필드에 대댓글이 포함되어 있는지 확인하세요.
GET {{baseUrl}}/posts/{{postId}}/comments?page=1&size=10&sort=latest
Content-Type: application/json

### 14. 특정 댓글 (최상위) 수정
# @commentId의 작성자인 @userId로 요청해야 합니다.
PUT {{baseUrl}}/comments/{{commentId}}
Content-Type: application/json

{
  "content": "수정된 최상위 댓글 내용입니다.",
  "userId": {{userId}}
}

### 14.1. 특정 대댓글 수정
# @publicReplyCommentId의 작성자인 @userId로 요청해야 합니다.
PUT {{baseUrl}}/comments/{{publicReplyCommentId}}
Content-Type: application/json

{
  "content": "수정된 대댓글 내용입니다.",
  "userId": {{userId}}
}

### 15. 특정 댓글 (최상위) 삭제
# @commentId의 작성자인 @userId로 요청해야 합니다.
DELETE {{baseUrl}}/comments/{{commentId}}
Content-Type: application/json

{
  "userId": {{userId}}
}

### 15.1. 특정 대댓글 삭제
# @publicReplyCommentId의 작성자인 @userId로 요청해야 합니다.
DELETE {{baseUrl}}/comments/{{publicReplyCommentId}}
Content-Type: application/json

{
  "userId": {{userId}}
}

### --------------------------------------------------------------------------------
### 팀 게시물 관련 테스트
### --------------------------------------------------------------------------------
# 주의: 먼저 '2. 새로운 커뮤니티 생성' 요청을 실행하여 @communityId가 유효한 값으로 업데이트되어 있어야 합니다.

### 16. 특정 커뮤니티에 팀 게시물 작성 (POST /api/communities/:communityId/posts/write)
# @communityId가 존재하는지, @userId가 해당 커뮤니티의 멤버인지 확인하세요.
# 성공 시 응답에서 'postId'를 확인하여 상단의 @teamPostId 변수를 업데이트하세요.
POST {{baseUrl}}/communities/{{communityId}}/posts/write
Content-Type: application/json

{
  "userId": {{userId}},
  "title": "팀 게시판 테스트 게시물",
  "content": "이것은 팀 게시판에 작성된 테스트 게시물입니다.",
  "type": "DISCUSSION"
}


### 17. 특정 커뮤니티의 팀 게시물 목록 조회 (GET /api/communities/:communityId/posts)
# @communityId가 존재하는지, @userId가 해당 커뮤니티의 멤버인지 확인하세요.
GET {{baseUrl}}/communities/{{communityId}}/posts?page=1&size=10&sort=latest&requestingUserId={{userId}}
Content-Type: application/json

### 18. 특정 팀 게시물 상세 조회 (GET /api/communities/:communityId/posts/:teamPostId)
# 상단의 @communityId와 @teamPostId 변수가 올바르게 설정되었는지 확인하세요.
GET {{baseUrl}}/communities/{{communityId}}/posts/{{teamPostId}}?requestingUserId={{userId}}
Content-Type: application/json

### 19. 특정 팀 게시물 수정 (PUT /api/communities/:communityId/posts/:teamPostId)
# @teamPostId의 작성자 또는 @communityId의 팀장인 @userId로 요청해야 합니다.
PUT {{baseUrl}}/communities/{{communityId}}/posts/{{teamPostId}}
Content-Type: application/json

{
  "title": "수정된 팀 게시물 제목",
  "content": "수정된 팀 게시물 내용입니다.",
  "userId": {{userId}}
}

### 20. 특정 팀 게시물 삭제 (DELETE /api/communities/:communityId/posts/:teamPostId)
# @teamPostId의 작성자 또는 @communityId의 팀장인 @userId로 요청해야 합니다.
DELETE {{baseUrl}}/communities/{{communityId}}/posts/{{teamPostId}}
Content-Type: application/json

{
  "userId": {{userId}}
}

### --------------------------------------------------------------------------------
### 팀 댓글 관련 테스트
### --------------------------------------------------------------------------------
# 주의: 먼저 '16. 특정 커뮤니티에 팀 게시물 작성' 요청을 실행하여 @teamPostId가 유효한 값으로 업데이트되어 있어야 합니다.

### 21. 특정 팀 게시물에 최상위 댓글 작성 (POST /api/team-posts/:teamPostId/comments)
# @teamPostId가 존재하는지, @userId가 해당 커뮤니티의 멤버인지 확인하세요.
# 성공 시 응답에서 'teamCommentId'를 확인하여 상단의 @teamCommentId 변수를 업데이트하세요.
POST {{baseUrl}}/team-posts/{{teamPostId}}/comments
Content-Type: application/json

{
  "communityId": {{communityId}},
  "userId": {{userId}},
  "content": "이것은 팀 게시물에 대한 최상위 테스트 댓글입니다."
}

### 21.1. 특정 팀 게시물에 대댓글 작성 (parentId 포함)
# @teamPostId는 대댓글을 작성할 팀 게시물 ID로 변경하세요.
# @userId는 대댓글을 작성할 사용자 ID로 변경하세요.
# @teamCommentId 변수가 최상위 팀 댓글의 ID로 설정되어 있는지 확인하세요.
# 성공 시 응답에서 'teamCommentId'를 확인하여 상단의 @teamReplyCommentId 변수를 업데이트하세요.
POST {{baseUrl}}/team-posts/{{teamPostId}}/comments
Content-Type: application/json

{
  "communityId": {{communityId}},
  "userId": {{userId}},
  "content": "이것은 팀 게시물 최상위 댓글에 대한 대댓글입니다.",
  "parentId": {{teamCommentId}}
}


### 22. 특정 팀 게시물의 댓글 목록 조회 (대댓글 포함 확인)
# 상단의 @teamPostId 변수가 올바르게 설정되었는지 확인하세요.
# 응답에서 최상위 댓글의 `replies` 필드에 대댓글이 포함되어 있는지 확인하세요.
GET {{baseUrl}}/team-posts/{{teamPostId}}/comments?communityId={{communityId}}&requestingUserId={{userId}}
Content-Type: application/json

### 23. 특정 팀 댓글 (최상위) 수정
# @teamCommentId의 작성자인 @userId로 요청해야 합니다.
# @communityId와 @teamPostId가 댓글이 속한 커뮤니티 및 게시물의 ID인지 확인하세요.
PUT {{baseUrl}}/team-comments/{{teamCommentId}}
Content-Type: application/json

{
  "communityId": {{communityId}},
  "content": "수정된 팀 최상위 댓글 내용입니다.",
  "userId": {{userId}}
}

### 23.1. 특정 팀 대댓글 수정
# @teamReplyCommentId의 작성자인 @userId로 요청해야 합니다.
# @communityId와 @teamPostId가 댓글이 속한 커뮤니티 및 게시물의 ID인지 확인하세요.
PUT {{baseUrl}}/team-comments/{{teamReplyCommentId}}
Content-Type: application/json

{
  "communityId": {{communityId}},
  "content": "수정된 팀 대댓글 내용입니다.",
  "userId": {{userId}}
}


### 24. 특정 팀 댓글 (최상위) 삭제
# @teamCommentId의 작성자인 @userId로 요청해야 합니다.
# @communityId와 @teamPostId가 댓글이 속한 커뮤니티 및 게시물의 ID인지 확인하세요.
DELETE {{baseUrl}}/team-comments/{{teamCommentId}}
Content-Type: application/json

{
  "communityId": {{communityId}},
  "userId": {{userId}}
}

### 24.1. 특정 팀 대댓글 삭제
# @teamReplyCommentId의 작성자인 @userId로 요청해야 합니다.
# @communityId와 @teamPostId가 댓글이 속한 커뮤니티 및 게시물의 ID인지 확인하세요.
DELETE {{baseUrl}}/team-comments/{{teamReplyCommentId}}
Content-Type: application/json

{
  "communityId": {{communityId}},
  "userId": {{userId}}
}


### --------------------------------------------------------------------------------
### 커뮤니티 가입 신청/관리 테스트
### --------------------------------------------------------------------------------
# 주의: 먼저 '2. 새로운 커뮤니티 생성' 요청을 실행하여 @communityId가 유효한 값으로 업데이트되어 있어야 합니다.

### 24.5. 커뮤니티 모집 상태 설정 (PUT /api/communities/:communityId)
# 커뮤니티 가입 신청을 허용하기 위해 'recruiting' 상태를 true로 설정합니다.
# @communityId의 팀장(LEADER)인 @userId로 요청해야 합니다.
PUT {{baseUrl}}/communities/{{communityId}}
Content-Type: application/json

{
  "recruiting": true,
  "userId": {{userId}}
}


### 25. 커뮤니티 가입 신청 (POST /api/communities/:communityId/apply)
# @communityId가 존재하는지, @applicantUserId가 존재하는 사용자인지 확인하세요.
# @applicantUserId는 @communityId의 팀장이 아닌 다른 사용자여야 합니다.
POST {{baseUrl}}/communities/{{communityId}}/apply
Content-Type: application/json

{
  "userId": {{applicantUserId}},
  "applicationMessage": "새로운 멤버로 참여하고 싶습니다!"
}

### 26. 특정 모집 커뮤니티의 신청자 목록 상세 조회 (GET /api/mypage/communities/recruiting/:communityId/applicants)
# @communityId의 팀장인 @userId (또는 @applicantUserId가 팀장이라면 그 값)로 요청해야 합니다.
GET {{baseUrl}}/mypage/communities/recruiting/{{communityId}}/applicants?requestingUserId={{userId}}
Content-Type: application/json

### 27. 신청 수락/거절 (PUT /api/mypage/communities/recruiting/:communityId/applicants/:userId)
# @communityId의 팀장인 @userId로 요청해야 하며, :userId는 신청자의 ID입니다.
# status는 "ACCEPTED" 또는 "REJECTED"
PUT {{baseUrl}}/mypage/communities/recruiting/{{communityId}}/applicants/{{applicantUserId}}
Content-Type: application/json

{
  "status": "ACCEPTED",
  "requestingUserId": {{userId}}
}

### 28. 모집 취소 (DELETE /api/mypage/communities/recruiting/:communityId)
# @communityId의 팀장인 @userId로 요청해야 합니다.
DELETE {{baseUrl}}/mypage/communities/recruiting/{{communityId}}
Content-Type: application/json

{
  "requestingUserId": {{userId}}
}
