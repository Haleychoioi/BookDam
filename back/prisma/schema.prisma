
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 사용자 역할 열거형 - 권한 관리용
enum Role {
  USER      // 일반 사용자 (도서 검색, 코멘트 작성, 찜 등)
  ADMIN     // 관리자 (Q&A 답변, 사용자 관리 등)
}

// 질문 상태 열거형 - Q&A 페이지 상태 관리용
enum QnaStatus {
  PENDING    // 대기 중 (관리자 답변 대기)
  ANSWERED   // 답변 완료 (관리자가 답변함)
}

// 도서 상태 열거형 - 사용자 서재(Library) 상태 관리용
enum BookStatus {
  WANT_TO_READ  // 보고싶어요 (읽고 싶은 책)
  READING       // 보는중 (현재 읽고 있는 책)
  RATED         // 평가한 (다 읽고 별점을 준 책)
}

// 사용자 테이블 - 회원가입/로그인 기능의 핵심
model User {
  userId       Int      @id @default(autoincrement()) @map("user_id")  // 사용자 고유 ID
  username     String   @db.VarChar(50)                        // 사용자명 (중복 불가)
  nickname     String?  @unique @db.VarChar(30)                                // 사용자 닉네임
  email        String   @unique @db.VarChar(100)                       // 이메일 (로그인 시 사용, 중복 불가)
  password     String   @db.VarChar(255)                               // 비밀번호 (해싱된 상태로 저장)
  role         Role     @default(USER)                                 // 사용자 역할 (기본값: 일반사용자)
  profileImage String?  @db.VarChar(255) @map("profile_image")         // 프로필 이미지 URL (선택사항)
  createdAt    DateTime @default(now()) @map("created_at")             // 계정 생성 시간
  updatedAt    DateTime @updatedAt @map("updated_at")                  // 마지막 정보 수정 시간

  // 관계 설정 - 이 사용자와 연결된 모든 데이터들
  reviews      Review[]    // 이 사용자가 작성한 모든 코멘트들
  wishlists    Wishlist[]  // 이 사용자의 찜 목록들 (ISBN 기반)
  libraries    Library[]   // 이 사용자의 서재(내 도서 목록)들 (ISBN 기반)
  questions    Qna[]       // 이 사용자가 작성한 질문들

  // 인덱스 추가 - 검색 성능 최적화 (로그인 시 이메일/사용자명으로 빠른 검색)
  @@index([email])     // 로그인 시 이메일로 빠른 검색
  @@index([username])  // 사용자명으로 빠른 검색
  @@map("users")       // 실제 DB 테이블명
}

// 도서 테이블 - 알라딘 API 데이터 캐싱용 + 통계 기능용
model Book {
  bookId      Int      @id @default(autoincrement()) @map("book_id")  // 도서 고유 ID
  isbn        String   @unique @db.VarChar(20)                       // ISBN (국제표준도서번호, 중복 불가)
  title       String   @db.VarChar(500)                              // 도서 제목
  author      String   @db.VarChar(200)                              // 저자명
  publisher   String   @db.VarChar(100)                              // 출판사
  thumbnail   String?  @db.VarChar(500)                              // 표지 이미지 URL (선택사항)
  description String?  @db.Text                                      // 도서 설명/줄거리 (선택사항)
  categoryId  Int?     @map("category_id")                           // 카테고리 ID (장르 분류용, 통계에 필수)
  price       Int?                                                   // 가격 (선택사항)
  pubDate     DateTime? @map("pub_date")                             // 출간일 (선택사항)
  totalPages  Int?     @map("total_pages")                           // 총 페이지 수 (선택사항)
  createdAt   DateTime @default(now()) @map("created_at")            // 캐시 저장 시간
  updatedAt   DateTime @updatedAt @map("updated_at")                 // 캐시 마지막 업데이트 시간

  // 관계 설정 - 이 도서와 연결된 모든 데이터들 (선택적 연결, 통계용)
  reviews     Review[]    // 이 도서에 대한 모든 코멘트들 (캐시된 도서만)
  wishlists   Wishlist[]  // 이 도서를 찜한 모든 기록들 (캐시된 도서만)

  // 인덱스 추가 - 검색 성능 최적화
  @@index([isbn])        // ISBN으로 빠른 검색 (도서 상세 페이지)
  @@index([title])       // 제목으로 빠른 검색 (도서 검색 기능)
  @@index([author])      // 저자명으로 빠른 검색 (저자별 검색, 통계용)
  @@index([categoryId])  // 카테고리별 빠른 검색 (장르별 추천, 통계용)
  @@map("books")         // 실제 DB 테이블명
}

// 코멘트 테이블 - 도서 상세 페이지의 코멘트 섹션용
model Review {
  reviewId  Int      @id @default(autoincrement()) @map("review_id")  // 코멘트 고유 ID
  userId    Int      @map("user_id")                                  // 코멘트 작성자 ID
  
  // 도서 식별 정보 (ISBN 기반 + Book 테이블 선택적 연결)
  bookIsbn  String   @map("book_isbn")                               // 코멘트 대상 도서 ISBN (필수)
  bookId    Int?     @map("book_id")                                 // Book 테이블 참조 (선택적, 통계용)
  
  // 코멘트 내용
  rating    Int                                                      // 별점 (1~5점)
  content   String?  @db.Text                                        // 코멘트 내용 (선택사항 - 별점만 입력하고 글은 안 써도 됨)
  createdAt DateTime @default(now()) @map("created_at")              // 코멘트 작성 시간
  updatedAt DateTime @updatedAt @map("updated_at")                   // 코멘트 마지막 수정 시간

  // 관계 설정 - 외래키 연결
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)  // 사용자 삭제 시 코멘트도 삭제
  book      Book?    @relation(fields: [bookId], references: [bookId], onDelete: SetNull)  // 캐시된 도서 (선택적, 통계용)

  // 중복 방지 - 한 사용자가 한 도서에 대해 하나의 코멘트만 작성 가능
  @@unique([userId, bookIsbn])
  
  // 인덱스 추가 - 검색 성능 최적화
  @@index([bookIsbn])  // 특정 도서의 모든 코멘트 빠른 조회 (도서 상세 페이지)
  @@index([bookId])    // Book 테이블 연결용 (통계 집계)
  @@index([userId])    // 특정 사용자의 모든 코멘트 빠른 조회 (마이페이지)
  @@index([rating])    // 별점별 코멘트 빠른 조회 (통계용)
  @@map("reviews")     // 실제 DB 테이블명 (기존 유지)
}

// 찜 목록 테이블 - 도서 상세 페이지의 찜 버튼 + 사용자 페이지의 찜 목록용
model Wishlist {
  wishlistId Int      @id @default(autoincrement()) @map("wishlist_id")  // 찜 기록 고유 ID
  userId     Int      @map("user_id")                                     // 찜한 사용자 ID
  
  // 도서 식별 정보 (ISBN 기반 + Book 테이블 선택적 연결)
  bookIsbn   String   @map("book_isbn")                                   // 찜한 도서 ISBN (필수)
  bookId     Int?     @map("book_id")                                     // Book 테이블 참조 (선택적, 통계용)
  
  createdAt  DateTime @default(now()) @map("created_at")                  // 찜한 시간

  // 관계 설정 - 외래키 연결
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)  // 사용자 삭제 시 찜 목록도 삭제
  book       Book?    @relation(fields: [bookId], references: [bookId], onDelete: SetNull)  // 캐시된 도서 (선택적, 통계용)

  // 중복 방지 - 한 사용자가 같은 도서를 중복으로 찜할 수 없음
  @@unique([userId, bookIsbn])
  
  // 인덱스 추가 - 검색 성능 최적화
  @@index([userId])    // 특정 사용자의 찜 목록 빠른 조회 (마이페이지)
  @@index([bookIsbn])  // ISBN으로 빠른 검색
  @@index([bookId])    // Book 테이블 연결용 (통계 집계)
  @@map("wishlists")   // 실제 DB 테이블명
}

// 서재(내 도서) 테이블 - 도서 상세 페이지의 서재 추가 버튼 + 사용자 페이지의 독서 통계용 (왓챠피디아 스타일)
model Library {
  libraryId Int        @id @default(autoincrement()) @map("library_id")  // 서재 기록 고유 ID
  userId    Int        @map("user_id")                                    // 서재 소유자 ID
  
  // 도서 식별 정보 (ISBN 기반, Book 테이블과는 별도 관리)
  bookIsbn     String      @map("book_isbn")                             // 도서 ISBN (알라딘 API의 고유 식별자)
  
  // 서재 상태 정보
  status       BookStatus  @default(WANT_TO_READ)                        // 독서 상태 (보고싶어요/보는중/평가한)
  createdAt    DateTime    @default(now()) @map("created_at")            // 서재 추가 시간
  updatedAt    DateTime    @updatedAt @map("updated_at")                 // 상태 마지막 변경 시간

  // 관계 설정 - 외래키 연결
  user         User        @relation(fields: [userId], references: [userId], onDelete: Cascade)  // 사용자 삭제 시 서재도 삭제

  // 중복 방지 - 한 사용자가 같은 도서를 중복으로 서재에 추가할 수 없음
  @@unique([userId, bookIsbn])
  
  // 인덱스 추가 - 검색 성능 최적화
  @@index([userId])     // 특정 사용자의 서재 빠른 조회 (마이페이지 독서 통계)
  @@index([bookIsbn])   // ISBN으로 빠른 검색
  @@index([status])     // 독서 상태별 빠른 조회 (보는중인 책, 평가한 책 등)
  @@map("libraries")    // 실제 DB 테이블명
}

// Q&A 테이블 - Q&A 페이지 + 관리자 페이지용
model Qna {
  qnaId     Int       @id @default(autoincrement()) @map("qna_id")  // 질문 고유 ID
  userId    Int       @map("user_id")                               // 질문 작성자 ID
  title     String    @db.VarChar(200)                              // 질문 제목
  question  String    @db.Text                                      // 질문 내용
  answer    String?   @db.Text                                      // 관리자 답변 (선택사항, 답변 전에는 null)
  status    QnaStatus @default(PENDING)                             // 답변 상태 (대기중/답변완료)
  createdAt DateTime  @default(now()) @map("created_at")            // 질문 작성 시간
  updatedAt DateTime  @updatedAt @map("updated_at")                 // 마지막 수정 시간 (답변 등록 시)

  // 관계 설정 - 외래키 연결
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade)  // 사용자 삭제 시 질문도 삭제

  // 인덱스 추가 - 검색 성능 최적화
  @@index([userId])  // 특정 사용자의 질문들 빠른 조회 (마이페이지)
  @@index([status])  // 상태별 질문 빠른 조회 (관리자 페이지에서 대기중인 질문만 보기)
  @@map("qna")       // 실제 DB 테이블명
}

// 알라딘 API 캐시 테이블 - API 호출 최적화 및 일일 호출 제한 대응용
model ApiCache {
  cacheId   Int      @id @default(autoincrement()) @map("cache_id")  // 캐시 기록 고유 ID
  cacheKey  String   @unique @db.VarChar(255) @map("cache_key")      // 캐시 키 (예: "bestseller:2025-07-17", "search:해리포터:page1")
  data      String   @db.LongText                                    // 캐시된 API 응답 데이터 (JSON 문자열)
  expiresAt DateTime @map("expires_at")                              // 캐시 만료 시간 (이 시간 이후로는 새로 API 호출)
  createdAt DateTime @default(now()) @map("created_at")              // 캐시 생성 시간

  // 캐싱 전략 예시:
  // - 베스트셀러: 1시간 캐시 (자주 변하지 않음)
  // - 검색 결과: 30분 캐시 (검색어별로 캐시)
  // - 도서 상세: 1일 캐시 (도서 정보는 거의 변하지 않음)
  
  @@map("api_cache") // 실제 DB 테이블명
}