// Prisma 스키마 설정
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============ ENUM 정의 ============

// 사용자 역할 (일반 사용자 / 관리자)
enum UserRole {
  USER  // 일반 사용자
  ADMIN // 관리자
}

// 독서팀 상태 (모집중 / 활동중 / 완료 / 닫힘)
enum CommunityStatus {
  RECRUITING // 모집중
  ACTIVE     // 활동중
  COMPLETED  // 완료
  CLOSED     // 닫힘
}

// 퍼블릭 게시글 타입 (일반글 / 모집글)
enum PostType {
  GENERAL     // 일반글 (기본값)
  RECRUITMENT // 모집글
}

// 모집글 상태
enum RecruitmentStatus {
  RECRUITING // 모집중
  CLOSED     // 모집완료
}

// 팀 내부 게시글 타입 (공지 / 질문 / 토론)
enum TeamPostType {
  NOTICE     // 공지 (팀장만 작성 가능)
  QUESTION   // 질문 (팀장+팀원)
  DISCUSSION // 토론 (팀장+팀원, 기본값)
}

// 팀 지원 상태 (대기 / 승인 / 거절)
enum ApplicationStatus {
  PENDING  // 대기중
  ACCEPTED // 승인됨
  REJECTED // 거절됨
}

// 개인 독서 상태 (읽고싶어요 / 읽는중 / 완료)
enum ReadingStatus {
  WANT_TO_READ // 읽고싶어요
  READING      // 읽는중
  COMPLETED    // 읽었음
}

// 팀 내 역할 (팀장 / 팀원)
enum TeamRole {
  LEADER // 팀장
  MEMBER // 팀원
}

// ============ 사용자 관련 모델 ============

// 사용자 정보
model User {
  userId       Int      @id @default(autoincrement()) @map("user_id")
  email        String   @unique @map("email")
  password     String   @map("password")
  name         String   @map("name")
  nickname     String   @unique @map("nickname")
  phone        String   @map("phone")
  profileImage String?  @map("profile_image")
  introduction String?  @map("introduction")
  agreement    Boolean  @map("agreement")
  role         UserRole @default(USER) @map("role")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 관계 설정
  teamMembers      TeamMember[]
  teamApplications TeamApplication[]
  posts            Post[]
  teamPosts        TeamPost[]
  comments         Comment[]
  teamComments     TeamComment[]
  myBooks          MyLibrary[]
  bookmarks        WishList[] @relation("UserWishLists")

  @@map("users")
}

// ============ 도서 관련 모델 ============

// 책 정보 (ISBN13 기반)
model Book {
  isbn13      String    @id @map("isbn13")
  title       String    @map("title")
  author      String    @map("author")
  publisher   String    @map("publisher")
  pubDate     String?   @map("pub_date")
  description String?   @db.Text @map("description")
  cover       String?   @map("cover")
  category    String?    @map("category")
  pageCount   Int?      @map("page_count")
  toc         String?   @db.Text @map("toc")
  story       String?   @db.Text @map("story")
  createdAt   DateTime  @default(now()) @map("created_at")

  // 관계 설정
  posts     Post[]
  teams     TeamCommunity[]
  myBooks   MyLibrary[]
  wishLists WishList[] @relation("BookWishLists")

  @@map("books")
}

// ============ 게시글 관련 모델 ============

// 퍼블릭 커뮤니티 게시글 (일반글 + 모집글)
model Post {
  postId            Int                @id @default(autoincrement()) @map("post_id")
  userId            Int                @map("user_id")
  type              PostType           @default(GENERAL) @map("type")
  title             String             @map("title")
  content           String             @db.Text @map("content")
  recruitmentStatus RecruitmentStatus? @map("recruitment_status")
  maxMembers        Int?               @map("max_members")
  isbn13            String?            @map("isbn13")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  // 관계 설정
  user         User              @relation(fields: [userId], references: [userId], onDelete: Cascade)
  book         Book?             @relation(fields: [isbn13], references: [isbn13], onDelete: SetNull)
  comments     Comment[]
  applications TeamApplication[]
  team         TeamCommunity?    @relation("RecruitmentPost")

  @@index([userId])
  @@index([type])
  @@index([recruitmentStatus])
  @@index([isbn13])
  @@map("posts")
}

// ============ 독서팀 관련 모델 ============

// 독서팀 (Private Community)
model TeamCommunity {
  teamId      Int             @id @default(autoincrement()) @map("team_id")
  postId      Int             @unique @map("post_id")
  isbn13      String?         @map("book_isbn13")
  status      CommunityStatus @default(ACTIVE) @map("status")
  postTitle   String          @map("post_title")
  postContent String          @db.Text @map("post_content")
  postAuthor  String          @map("post_author")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // 관계 설정
  recruitmentPost Post         @relation("RecruitmentPost", fields: [postId], references: [postId], onDelete: Cascade)
  book            Book?        @relation(fields: [isbn13], references: [isbn13], onDelete: SetNull)
  members         TeamMember[]
  teamPosts       TeamPost[]

  @@map("team_communities")
}

// 팀 멤버십 (사용자-팀 다대다 관계)
model TeamMember {
  userId Int      @map("user_id")
  teamId Int      @map("team_id")
  role   TeamRole @default(MEMBER) @map("role")

  // 관계 설정
  user User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  team TeamCommunity @relation(fields: [teamId], references: [teamId], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([teamId])
  @@map("team_members")
}

// 모집 게시글 지원서
model TeamApplication {
  applicationId      Int               @id @default(autoincrement()) @map("application_id")
  userId             Int               @map("user_id")
  postId             Int               @map("post_id")
  applicationMessage String            @map("application_message")
  status             ApplicationStatus @default(PENDING) @map("status")
  appliedAt          DateTime          @default(now()) @map("applied_at")
  processedAt        DateTime?         @map("processed_at")

  // 관계 설정
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [postId], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId, status])
  @@map("team_applications")
}

// 팀 내부 게시글 (공지, 질문, 토론)
model TeamPost {
  teamPostId Int          @id @default(autoincrement()) @map("team_post_id")
  userId     Int          @map("user_id")
  teamId     Int          @map("team_id")
  type       TeamPostType @default(DISCUSSION) @map("type")
  title      String       @map("title")
  content    String       @db.Text @map("content")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  // 관계 설정
  user     User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  team     TeamCommunity @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
  comments TeamComment[]

  @@index([teamId])
  @@index([userId])
  @@index([type])
  @@map("team_posts")
}

// ============ 댓글 관련 모델 ============

// 퍼블릭 게시글 댓글
model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  parentId  Int?     @map("parent_id")

  // 관계 설정
  post    Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parent  Comment? @relation("ReplyToComment", fields: [parentId], references: [commentId], onDelete: SetNull)
  replies Comment[] @relation("ReplyToComment")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

// 팀 게시글 댓글
model TeamComment {
  teamCommentId Int         @id @default(autoincrement()) @map("team_comment_id")
  teamPostId    Int         @map("team_post_id")
  userId        Int         @map("user_id")
  content       String      @map("content")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  parentId      Int?        @map("parent_id")

  // 관계 설정
  teamPost TeamPost    @relation(fields: [teamPostId], references: [teamPostId], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  parent   TeamComment? @relation("ReplyToTeamComment", fields: [parentId], references: [teamCommentId], onDelete: SetNull)
  replies  TeamComment[] @relation("ReplyToTeamComment")

  @@index([teamPostId])
  @@index([userId])
  @@index([parentId])
  @@map("team_comments")
}

// ============ 개인 도서 관리 모델 ============

// 개인 도서관 (읽고싶어요, 읽는중, 완료한 책들)
model MyLibrary {
  libraryId Int           @id @default(autoincrement()) @map("library_id")
  userId    Int           @map("user_id")
  isbn13    String        @map("book_isbn13")
  myRating  Int?          @map("my_rating")
  status    ReadingStatus @map("status")
  addedAt   DateTime      @default(now()) @map("added_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // 관계 설정
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  book Book @relation(fields: [isbn13], references: [isbn13], onDelete: Cascade)

  @@unique([userId, isbn13])
  @@index([userId])
  @@index([status])
  @@map("my_libraries")
}

// 위시리스트 (나중에 읽고 싶은 책들)
model WishList {
  wishListId Int      @id @default(autoincrement()) @map("wish_list_id")
  userId     Int      @map("user_id")
  isbn13     String   @map("book_isbn13")
  addedAt    DateTime @default(now()) @map("added_at")

  // 관계 설정
  user User @relation("UserWishLists", fields: [userId], references: [userId], onDelete: Cascade)
  book Book @relation("BookWishLists", fields: [isbn13], references: [isbn13], onDelete: Cascade)

  @@unique([userId, isbn13])
  @@index([userId])
  @@map("wish_lists")
}